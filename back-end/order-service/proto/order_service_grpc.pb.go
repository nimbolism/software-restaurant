// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: order_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderService_GetAllOrders_FullMethodName                     = "/OrderService/GetAllOrders"
	OrderService_GetAllOrdersByUsername_FullMethodName           = "/OrderService/GetAllOrdersByUsername"
	OrderService_GetAllOrdersByFoodName_FullMethodName           = "/OrderService/GetAllOrdersByFoodName"
	OrderService_GetAllOrdersBySideDishName_FullMethodName       = "/OrderService/GetAllOrdersBySideDishName"
	OrderService_GetAllOrdersBetweenTimestamps_FullMethodName    = "/OrderService/GetAllOrdersBetweenTimestamps"
	OrderService_GetAllOrdersByCategoryOrMealName_FullMethodName = "/OrderService/GetAllOrdersByCategoryOrMealName"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	GetAllOrders(ctx context.Context, in *GetAllOrdersRequest, opts ...grpc.CallOption) (*GetAllOrdersResponse, error)
	GetAllOrdersByUsername(ctx context.Context, in *GetAllOrdersByUsernameRequest, opts ...grpc.CallOption) (*GetAllOrdersResponse, error)
	GetAllOrdersByFoodName(ctx context.Context, in *GetAllOrdersByFoodNameRequest, opts ...grpc.CallOption) (*GetAllOrdersResponse, error)
	GetAllOrdersBySideDishName(ctx context.Context, in *GetAllOrdersBySideDishNameRequest, opts ...grpc.CallOption) (*GetAllOrdersResponse, error)
	GetAllOrdersBetweenTimestamps(ctx context.Context, in *GetAllOrdersBetweenTimestampsRequest, opts ...grpc.CallOption) (*GetAllOrdersResponse, error)
	GetAllOrdersByCategoryOrMealName(ctx context.Context, in *GetAllOrdersByCategoryOrMealNameRequest, opts ...grpc.CallOption) (*GetAllOrdersResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) GetAllOrders(ctx context.Context, in *GetAllOrdersRequest, opts ...grpc.CallOption) (*GetAllOrdersResponse, error) {
	out := new(GetAllOrdersResponse)
	err := c.cc.Invoke(ctx, OrderService_GetAllOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAllOrdersByUsername(ctx context.Context, in *GetAllOrdersByUsernameRequest, opts ...grpc.CallOption) (*GetAllOrdersResponse, error) {
	out := new(GetAllOrdersResponse)
	err := c.cc.Invoke(ctx, OrderService_GetAllOrdersByUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAllOrdersByFoodName(ctx context.Context, in *GetAllOrdersByFoodNameRequest, opts ...grpc.CallOption) (*GetAllOrdersResponse, error) {
	out := new(GetAllOrdersResponse)
	err := c.cc.Invoke(ctx, OrderService_GetAllOrdersByFoodName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAllOrdersBySideDishName(ctx context.Context, in *GetAllOrdersBySideDishNameRequest, opts ...grpc.CallOption) (*GetAllOrdersResponse, error) {
	out := new(GetAllOrdersResponse)
	err := c.cc.Invoke(ctx, OrderService_GetAllOrdersBySideDishName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAllOrdersBetweenTimestamps(ctx context.Context, in *GetAllOrdersBetweenTimestampsRequest, opts ...grpc.CallOption) (*GetAllOrdersResponse, error) {
	out := new(GetAllOrdersResponse)
	err := c.cc.Invoke(ctx, OrderService_GetAllOrdersBetweenTimestamps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAllOrdersByCategoryOrMealName(ctx context.Context, in *GetAllOrdersByCategoryOrMealNameRequest, opts ...grpc.CallOption) (*GetAllOrdersResponse, error) {
	out := new(GetAllOrdersResponse)
	err := c.cc.Invoke(ctx, OrderService_GetAllOrdersByCategoryOrMealName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	GetAllOrders(context.Context, *GetAllOrdersRequest) (*GetAllOrdersResponse, error)
	GetAllOrdersByUsername(context.Context, *GetAllOrdersByUsernameRequest) (*GetAllOrdersResponse, error)
	GetAllOrdersByFoodName(context.Context, *GetAllOrdersByFoodNameRequest) (*GetAllOrdersResponse, error)
	GetAllOrdersBySideDishName(context.Context, *GetAllOrdersBySideDishNameRequest) (*GetAllOrdersResponse, error)
	GetAllOrdersBetweenTimestamps(context.Context, *GetAllOrdersBetweenTimestampsRequest) (*GetAllOrdersResponse, error)
	GetAllOrdersByCategoryOrMealName(context.Context, *GetAllOrdersByCategoryOrMealNameRequest) (*GetAllOrdersResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) GetAllOrders(context.Context, *GetAllOrdersRequest) (*GetAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrders not implemented")
}
func (UnimplementedOrderServiceServer) GetAllOrdersByUsername(context.Context, *GetAllOrdersByUsernameRequest) (*GetAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrdersByUsername not implemented")
}
func (UnimplementedOrderServiceServer) GetAllOrdersByFoodName(context.Context, *GetAllOrdersByFoodNameRequest) (*GetAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrdersByFoodName not implemented")
}
func (UnimplementedOrderServiceServer) GetAllOrdersBySideDishName(context.Context, *GetAllOrdersBySideDishNameRequest) (*GetAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrdersBySideDishName not implemented")
}
func (UnimplementedOrderServiceServer) GetAllOrdersBetweenTimestamps(context.Context, *GetAllOrdersBetweenTimestampsRequest) (*GetAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrdersBetweenTimestamps not implemented")
}
func (UnimplementedOrderServiceServer) GetAllOrdersByCategoryOrMealName(context.Context, *GetAllOrdersByCategoryOrMealNameRequest) (*GetAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrdersByCategoryOrMealName not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_GetAllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetAllOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAllOrders(ctx, req.(*GetAllOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAllOrdersByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOrdersByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAllOrdersByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetAllOrdersByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAllOrdersByUsername(ctx, req.(*GetAllOrdersByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAllOrdersByFoodName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOrdersByFoodNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAllOrdersByFoodName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetAllOrdersByFoodName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAllOrdersByFoodName(ctx, req.(*GetAllOrdersByFoodNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAllOrdersBySideDishName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOrdersBySideDishNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAllOrdersBySideDishName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetAllOrdersBySideDishName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAllOrdersBySideDishName(ctx, req.(*GetAllOrdersBySideDishNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAllOrdersBetweenTimestamps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOrdersBetweenTimestampsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAllOrdersBetweenTimestamps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetAllOrdersBetweenTimestamps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAllOrdersBetweenTimestamps(ctx, req.(*GetAllOrdersBetweenTimestampsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAllOrdersByCategoryOrMealName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOrdersByCategoryOrMealNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAllOrdersByCategoryOrMealName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetAllOrdersByCategoryOrMealName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAllOrdersByCategoryOrMealName(ctx, req.(*GetAllOrdersByCategoryOrMealNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllOrders",
			Handler:    _OrderService_GetAllOrders_Handler,
		},
		{
			MethodName: "GetAllOrdersByUsername",
			Handler:    _OrderService_GetAllOrdersByUsername_Handler,
		},
		{
			MethodName: "GetAllOrdersByFoodName",
			Handler:    _OrderService_GetAllOrdersByFoodName_Handler,
		},
		{
			MethodName: "GetAllOrdersBySideDishName",
			Handler:    _OrderService_GetAllOrdersBySideDishName_Handler,
		},
		{
			MethodName: "GetAllOrdersBetweenTimestamps",
			Handler:    _OrderService_GetAllOrdersBetweenTimestamps_Handler,
		},
		{
			MethodName: "GetAllOrdersByCategoryOrMealName",
			Handler:    _OrderService_GetAllOrdersByCategoryOrMealName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_service.proto",
}
